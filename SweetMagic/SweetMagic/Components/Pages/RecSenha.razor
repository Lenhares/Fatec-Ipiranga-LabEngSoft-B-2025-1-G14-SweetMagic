@page "/recSenha"
@rendermode InteractiveServer
@layout SweetMagic.Components.Layout.MainLayout
@using SweetMagic.Models;
@using SweetMagic.Services;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Text.RegularExpressions;
@inject NavigationManager navigation

<PageTitle>Sweet Magic - Recuperar Senha</PageTitle>
<div class="login-page">
    <div class="login-box">
        <a href="/">
            <img src="assets/images/logo.png" alt="Logo" class="logo">
        </a>
        <h2>Recuperar Senha</h2>

        <EditForm EditContext="editContext" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (stage == 1) {
                <div class="form-group">
                    <label class="form-label" for="email">E-mail</label>
                    <InputText class="form-control" id="email" @bind-Value="email" type="text" @oninput="clearError" />
                </div>
                <button class="submitBtn" type="submit">Verificar</button>
            }
            else if (stage == 2) {
                <div class="form-group">
                    <p>@securityQuestion</p>
                    <label class="form-label" for="answer">Resposta de Segurança</label>
                    <InputText class="form-control" id="answer" @bind-Value="securityAnswer" type="text" @oninput="clearError" />
                </div>
                <button class="submitBtn" type="submit">Confirmar</button>
            }
            else if (stage == 3) {
                <div class="form-group">
                    <label class="form-label" for="password">Nova Senha</label>
                    <InputText class="form-control" id="password" @bind-Value="newPassword" type="password" @oninput="clearError" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="confirmPassword">Confirmar Senha</label>
                    <InputText class="form-control" id="confirmPassword" @bind-Value="confirmPassword" type="password" @oninput="clearError" />
                </div>
                <button class="submitBtn" type="submit">Redefinir Senha</button>
            }
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage)) {
            <div class="error-message">@errorMessage</div>
        }
        @if (!string.IsNullOrEmpty(successMessage)) {
            <div class="success-message">@successMessage</div>
        }
    </div>
</div>

@code {
    private int stage = 1;
    private string email = string.Empty;
    private string securityQuestion = string.Empty;
    private string securityAnswer = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string? errorMessage;
    private string? successMessage;
    private EditContext editContext;


    [Inject]
    public UserService? UserService { get; set; }

    protected override void OnInitialized() {
        editContext = new EditContext(this);
    }

    private void clearError() {
        errorMessage = null;  // Clear any existing error message
        editContext!.NotifyValidationStateChanged();
    }

    private async Task HandleSubmit() {
        if (stage == 1) {
            User user = await UserService!.GetUserByEmailAsync(email);
            if (user != null) {
                securityQuestion = user.PerguntaSeguranca!;
                stage = 2;
            }
            else {
                errorMessage = "E-mail não encontrado.";
            }
        }
        else if (stage == 2) {
            User user = await UserService!.GetUserByEmailAsync(email);
            bool isValid = await UserService!.VerifySecurityAnswerAsync(user!, securityQuestion, securityAnswer);
            if (isValid) {
                stage = 3;
            }
            else {
                errorMessage = "Resposta incorreta.";
            }
        }
        else if (stage == 3) {
            // Password validation
            if (newPassword != confirmPassword) {
                errorMessage = "As senhas não coincidem.";
                return;
            }
            User user = await UserService!.GetUserByEmailAsync(email);
            if (!IsStrongPassword(newPassword))
            {
                errorMessage = "Nova senha muito fraca";
                return;
            }
            bool success = await UserService!.ResetPasswordAsync(user!, newPassword);
            if (success) {
                successMessage = "Senha redefinida com sucesso!";
                stage = 1;  // Reset to email input stage
            }
            else {
                errorMessage = "Erro ao redefinir senha.";
            }
        }
        StateHasChanged(); // Ensure UI refreshes after state change
    }

    private bool IsStrongPassword(string password) {
        // Password should be at least 8 characters, contain an uppercase letter,
        // a lowercase letter, a digit, and a special character.
        var passwordPattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$";
        return Regex.IsMatch(password, passwordPattern);
    }
}