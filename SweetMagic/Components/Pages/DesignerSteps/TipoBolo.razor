@using SweetMagic.Helpers
@using SweetMagic.Models
@inject BoloService BoloService

<h3>Qual o tipo de bolo?</h3>
<div class="btnContainer">
    <div class="btnGroup">
        <button class="btn @(tipoSelecionado.Equals("Quadrado") ? " selecionado" : "" )"
            @onclick="@(() => SelecionarTipo("Redondo"))">
            <img src="assets/images/designer/roundCake.png" class="btnImg" />
            <span class="btnTitulo">Redondo</span>
        </button>
    </div>
    <div class="btnGroup">
        <button class="btn@(tipoSelecionado.Equals("Retangular") ? " selecionado" : "" )"
            @onclick="@(() => SelecionarTipo("Retangular"))">
            <img src="assets/images/designer/rectangleCake.png" class="btnImg" />
            <span class="btnTitulo">Retangular</span>
        </button>
    </div>
</div>
@code {
    [CascadingParameter]
    public Designer designer { get; set; }

    private string tipoSelecionado = "";

    private void SelecionarTipo(string tipo) {
        if (!tipoSelecionado.Equals(tipo)) // Desmarca se já estiver selecionado
        {
            tipoSelecionado = tipo;
            BoloService.AtualizarPropriedadeBolo(nameof(Bolo.tipo), tipo);
            designer.AvisaModeloAtualizado();
        }
        else {
            tipoSelecionado = ""; // Desseleciona se o mesmo botão for clicado novamente
            BoloService.AtualizarPropriedadeBolo(nameof(Bolo.tipo), ""); // Limpa o peso no modelo
        }
        StateHasChanged();
    }
}