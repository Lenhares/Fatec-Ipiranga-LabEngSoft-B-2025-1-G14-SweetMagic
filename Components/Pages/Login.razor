@page "/"
@rendermode InteractiveServer
@layout SweetMagic.Components.Layout.MainLayout
@using SweetMagic.Models;
@using SweetMagic.Services;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components.Forms;
@inject NavigationManager NavigationManager

<PageTitle>Sweet Magic - Login</PageTitle>
<div class="login-page">
    <div class="login-box">
        <a href="/">
            <img src="assets/images/logo.png" alt="Logo" class="logo">
        </a>
        <h2>Entrar</h2>
        <EditForm EditContext="editContext" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label" for="email">E-mail</label>
                <InputText class="form-control" id="email" @bind-Value="loginModel.Email" type="text" @oninput="clearError" />
            </div>

            <div class="form-group">
                <label class="form-label" for="password">Senha</label>
                <InputText class="form-control" id="password" @bind-Value="loginModel.Password" type="password"  @oninput="clearError"/>
            </div>

            <div class="form-group rememberMe">
                <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-checkbox" />
                <label class="form-label rememberMeLabel" for="rememberMe">Lembrar de mim</label>
            </div>

            <button class="loginBtn" type="submit">Login</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage)) {
            <div class="error-message">@errorMessage</div>
        }
        <a class="cadastrese" href="/cadastro">Cadastrar-se</a>
        <h2/>
        <a class="cadastrese" href="/recSenha">Recuperar senha</a>
    </div>
</div>

@code {
    [Inject]
    public UserService? UserService { get; set; }
    [Inject]
    private IJSRuntime? JS { get; set; }
    private LoginModel loginModel = new LoginModel();
    private EditContext? editContext;
    private CancellationTokenSource? debounceCts;
    private string? errorMessage;

    public async Task clearError() {

        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        try {
            await Task.Delay(500, debounceCts.Token);
            errorMessage = null;
            editContext!.NotifyValidationStateChanged();
        }
        catch (TaskCanceledException) {
            return;
        } 
    }

    protected override void OnInitialized() {
        loginModel ??= new();
        editContext = new(loginModel);
        editContext.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args) {

        if(String.IsNullOrWhiteSpace(loginModel.Email)) {
            errorMessage = "Favor informar o e-mail.";
            editContext!.NotifyValidationStateChanged();
            return;
        }

        if (!loginModel.Email.Contains("@")) {
            errorMessage = "Favor informar um endereço de e-mail válido.";
            editContext!.NotifyValidationStateChanged();
            return;
        }

        if (String.IsNullOrWhiteSpace(loginModel.Password)) {
            errorMessage = "Favor informar a senha.";
            editContext!.NotifyValidationStateChanged();
            return;
        }
    }

    private async Task HandleLogin()
    {
        if (!String.IsNullOrEmpty(errorMessage)) {
            return;
        }
        // Authenticate user using UserService
        bool isAuthenticated = await UserService!.LoginUserAsync(loginModel.Email!, loginModel.Password!);

        if (isAuthenticated)
        {
            if (loginModel.RememberMe)
            {
                await SetRememberUserCookie(loginModel.Email!);
            }
            errorMessage = null; // Clear error message on successful login
            NavigationManager.NavigateTo("/history");
        }
        else
        {
            // Show an error message if authentication fails
            errorMessage = "Autenticação falhou. Verifique seu e-mail e senha.";
        }
    }

    private async Task SetRememberUserCookie(string email) {
        await JS!.InvokeVoidAsync("localStorage.setItem", "saved", email);
    }
    }
}