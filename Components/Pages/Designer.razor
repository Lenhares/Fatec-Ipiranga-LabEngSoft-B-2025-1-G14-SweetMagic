@page "/designer"
@page "/designer/{Id:int}"
@rendermode InteractiveServer
@layout SweetMagic.Components.Layout.MainLayout
@using SweetMagic.Helpers
@using SweetMagic.Models
@inject NavigationManager Navigation
@inject BoloService BoloService
@inject Services.UserService UserService

<PageTitle>Sweet Magic - Designer</PageTitle>
<CascadingValue Value="this">
    <div class="background-box">
        <button class="restartBtn" @onclick="Reset">Recomeçar</button>
        <div class="scrollable-content">
            <div class="component-container">
                <DynamicComponent Type="@ObterComponenteAtual()" />
            </div>
        </div>               
        <div class="navegacaoDesigner">
            <button class="returnBtn" @onclick="Return" disabled="@(etapaAtualIndex == 1)">Voltar</button>
            <button class="nextBtn" @onclick="Next" disabled="@(!modeloAtualizado)">Próximo</button>
        </div>
    </div>
</CascadingValue>

@code {
    [CascadingParameter]
    public SweetMagic.Components.Layout.MainLayout? Layout { get; set; }
    [Parameter]
    public int? Id { get; set; }

    private List<EtapaDesigner> etapas = EtapaDesigner.GetEtapas();
    private bool modeloAtualizado = false;
    private int etapaAtualIndex = 1; 
    private bool carregandoBolo = false; // Flag para controlar a carga do bolo

    protected override void OnInitialized() {

        base.OnInitialized();
        Layout!.setPageName("Cake designer");
    }

    protected override async Task OnParametersSetAsync() {
        
        if (!UserService.Logado) {
            Navigation.NavigateTo("/");
            return;
        }

        //Valor de ID definido através da URI
        if (Id.HasValue && !carregandoBolo && BoloService.BoloAtual.Id != Id.Value) {

            carregandoBolo = true;
            // Carregar o bolo para edição
            var boloParaEditar = await BoloService.ObterBoloPorIdAsync(Id.Value);
            carregandoBolo = false; // Resetar a flag após a conclusão (ou falha)

            if (boloParaEditar != null) {
                BoloService.AtualizarBolo(boloParaEditar);
                modeloAtualizado = true;
                etapaAtualIndex = etapas.Count;
            }
            else {
                // Lidar com o caso em que o bolo não é encontrado
                Console.WriteLine($"Bolo com ID {Id.Value} não encontrado para edição.");
                Navigation.NavigateTo("/history"); // Voltar para a lista
            }
        }
        else if (!Id.HasValue && BoloService.BoloAtual.Id != 0) {
            // Se não há ID e já temos um bolo carregado (edição cancelada?), resetar
            Reset();
        }
        else if (!Id.HasValue && BoloService.BoloAtual.Id == 0) {
            // Se não há ID e não temos bolo, iniciar novo
            BoloService.AtualizarBolo(new Bolo());
            etapaAtualIndex = 1;
            modeloAtualizado = false;
        }
    }

    private void Reset()
    {
        etapaAtualIndex = 1;
        BoloService.AtualizarBolo(new Bolo());
        modeloAtualizado = false;
        ObterComponenteAtual();
        StateHasChanged();
    }

    private Type ObterComponenteAtual()
    {
        return etapas!.Find(prop => prop.Id == etapaAtualIndex).ComponentType;
    }

    private void Return() {
        if(etapaAtualIndex > 1)
        {
            modeloAtualizado = true;
            etapaAtualIndex--;
            ObterComponenteAtual();
            StateHasChanged();
        }
    }

    private void Next() {
        if (etapaAtualIndex < etapas.Count) {
            modeloAtualizado = false;
            etapaAtualIndex++;
            ObterComponenteAtual();
            StateHasChanged();
        }
    }

    public void AvisaModeloAtualizado()
    {
        modeloAtualizado = true;
        StateHasChanged();
    }

    public async Task SalvarBolo()
    {
        BoloService.BoloAtual.imagemFinal = "assets/images/designer/finishedCake.png";
        if(UserService.UsuarioAtual != null)
        {
            BoloService.BoloAtual.criador = UserService.UsuarioAtual;
        }
        try
        {

            if (Id.HasValue) {
                // Atualizar um bolo existente
                BoloService.BoloAtual.Id = Id.Value; // Garantir que o ID esteja correto
                bool sucesso = await BoloService.AtualizarBoloNoBanco();
                if (sucesso) {
                    Navigation.NavigateTo("/history");
                }
                else {
                    Console.WriteLine($"Erro ao atualizar o bolo com ID {Id.Value}.");
                    // Lógica para lidar com falha na atualização
                }
            }
            else {
                // Adicionar um novo bolo
                await BoloService.AdicionarBoloAoBanco();
                Navigation.NavigateTo("/history"); // Ou para a página de conclusão
            }
        }
        catch (Exception)
        {
            Console.WriteLine("Erro ao salvar o bolo no banco de dados.");
            throw;
        }
    }
}
